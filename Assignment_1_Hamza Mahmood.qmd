---
title: "Assignment - 1"
author: "Hamza Mahmood - 0796503"
format: pdf
---
```{r}
library(ggplot2)
library(viridis)
housing_data <- read.csv("NY-House-Dataset.csv")
ggplot(housing_data, aes(x = LONGITUDE, y = LATITUDE)) +
  stat_density2d(aes(fill = after_stat(level)), geom = "polygon")+ scale_fill_viridis() +
  coord_fixed() +
  labs(title = "Heat Map of Housing Prices in NYC", fill = "Density")

# Adding advanced heat map
library(ggmap)
register_stadiamaps("e51b3368-40e6-41ae-acab-0e44e10cc9cc", 
                    write = TRUE)
nyc_map <- get_stadiamap(bbox = c(left = -74.05, bottom = 40.65, right = -73.75, top = 40.85), 
                         zoom = 12, maptype = "stamen_toner_lite")
ggmap(nyc_map) +
  stat_density2d(data = housing_data, aes(x = LONGITUDE, y = LATITUDE, fill = after_stat(level), alpha = after_stat(level)), geom = "polygon") +
  scale_fill_viridis(name = "Density Level") +
  scale_alpha(range = c(0, 0.3), guide = "none") +
  labs(title = "Heat Map of Housing Prices in NYC",
       x = "Longitude", y = "Latitude") +
  theme_minimal()
```

```{r}
# Load the necessary libraries
library(ggplot2)
library(dplyr)

par(mfrow=c(1,3))

# Assuming 'housing_data$BEDS' is the column representing the number of bedrooms
# First, filter the dataset for entries with 10 or fewer bedrooms
filtered_data <- subset(housing_data, BEDS <= 5)

# Create a summary of counts by the number of bedrooms
bedroom_counts <- as.data.frame(table(filtered_data$BEDS))

# Make sure the data is ordered by the number of bedrooms before plotting
bedroom_counts <- bedroom_counts[order(as.numeric(bedroom_counts$Var1)),]

# Create the pie chart
ggplot(bedroom_counts, aes(x = "", y = Freq, fill = factor(Var1))) +
  geom_bar(width = 1, stat = "identity") +
  coord_polar("y", start = 0) +
  scale_fill_brewer(palette="Paired") + # Use a color palette that provides distinct colors
  labs(fill = "Number of Bedrooms",
       title = "Pie Chart for Number of Bedrooms") +
  theme_void() +
  theme(legend.position = "right")


# Filter the dataset for properties less than $100,000,000
housing_data_filtered <- housing_data %>% 
  filter(PRICE < 100000000)

# Create the scatter plot with the filtered dataset
ggplot(housing_data_filtered, aes(x = PROPERTYSQFT, y = PRICE)) + 
  geom_point(alpha = 0.5, color = "darkblue") +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(title = "Price and Property Size",
       x = "Property Size (sqft)",
       y = "Price ($)")

#second scatter plot
ggplot() + 
  # Plot all points in blue
  geom_point(data = housing_data_filtered, aes(x = PROPERTYSQFT, y = PRICE), color = "darkblue", alpha = 0.5, shape = 16) +
  # Overlay points above 50 million in red
  geom_point(data = subset(housing_data_filtered, PRICE > 40000000), aes(x = PROPERTYSQFT, y = PRICE), color = "red", alpha = 0.5, shape = 15) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(title = "Price and Property Size",
       x = "Property Size (sqft)",
       y = "Price ($)")

```

```{r}
library(treemap)

# Assuming 'housing_data$BEDS' is the column representing the number of bedrooms
# And we're only interested in properties with 10 or fewer bedrooms

# Prepare the data for the treemap
bedroom_data <- housing_data[housing_data$BEDS <= 10, ]
bedroom_counts <- as.data.frame(table(bedroom_data$BEDS))
names(bedroom_counts) <- c("Number_of_Bedrooms", "Count")

# Create the treemap
treemap(bedroom_counts,
        index = "Number_of_Bedrooms",
        vSize = "Count",
        title = "Treemap of NYC Housing by Number of Bedrooms",
        fontsize.labels = 12,  # Adjust label font size as needed
        palette = "Spectral")  # Choose a color palette

```

